//DATA IMPORT/////////////////////////////////////////////////////////////////////////

//Syria boundary polygon
var Syria = ee.FeatureCollection('users/salem043/syr_admin0');
//Map.addLayer(Syria, {color: 'FF0000'}, 'Syria');

//Conflict site location data
var site = ee.FeatureCollection('ft:1UNSrVLRJihOaHiXKYZNR_OIR3_E6PBuawdd1mKsU');
//Map.addLayer(site, {color: 'red'}, 'location');

//Drought and precipitation data
var rainfall=ee.ImageCollection("IDAHO_EPSCOR/TERRACLIMATE")
.filter(ee.Filter.date('2000-01-01', '2011-01-01'));


//Grid cells over Syria 

var lat_start = 32.31644;
var lat_end = 37.31914;
var lon_start = 35.61394; 
var lon_end = 42.38504;
// 2) Decide no. of (in this case: equally sized) cells
var num_cells = 1000;
var lon_edge = (lon_end-lon_start)/Math.sqrt(num_cells);
var lat_edge = (lat_end-lat_start)/Math.sqrt(num_cells);
// 3) Create the grid
var polys = [];
var polys_line = [];
var cell_id = 0;
for (var lon = lon_start; lon < lon_end; lon += lon_edge) {
  var x1 = lon;
  var x2 = lon + lon_edge;
  for (var lat = lat_start; lat < lat_end; lat += lat_edge) {
    cell_id = cell_id + 1;
    var y1 = lat;
    var y2 = lat + lat_edge;

    polys.push(ee.Feature(ee.Geometry.Rectangle(x1, y1, x2, y2), {label: cell_id}));
  }
}
var grid = ee.FeatureCollection(polys);
print('Grid', grid)


//Worldpop population data
var pop = ee.ImageCollection("WorldPop/GP/100m/pop").filterBounds(grid);
print('Worldpop data', pop);

//PREDICTED POPULATION WITHIN EACH GRID CELL ///////////////////////////////////////

//Create series of 11 images for years 2000-2011 in Syria
//(2000 shown here as trial)

var yr_2000 = pop.filterDate('2000');
var yr_2000_img = yr_2000.reduce(ee.Reducer.sum());
var Syria_00 = yr_2000_img.clip(Syria);
//Map.addLayer(Syria_00);

//Create a dataframe that sums the population counts in the pixels
//within each grid
var grids_00 = Syria_00.reduceRegions({
  collection: grid,
  reducer: ee.Reducer.sum(),
  scale: 6000,
});
print('2000 grid', grids_00);

//Estimate drought intensity 2006-2011 per grid cell

var rain_00=rainfall.filterDate('2000')
var rain_00_img = rain_00.reduce(ee.Reducer.median());
print(rain_00_img)

var visParams = {bands: ['pr_median'], max: 0.3};
Map.addLayer(rain_00_img, visParams, 'true-color composite');



//DROUGHT PER GRID CELL
//Identify the rainfall patterns for 2000 to 2011.





//select ''urban'' cutoff







//Least cost path to urban grid cell




//Use minimum cost path to identify ''closest''urban area





