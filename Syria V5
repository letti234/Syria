/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
//  DROUGHT, MIGRATION, AND CONFLICT PAPER - SYRIA
//  COLETTE SALEMI
//  FALL 2019
/////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////
//
//  DATA IMPORT
//
//////////////////////////////////////////////////////////////////////////

//Syria boundary polygon
var Syria = ee.FeatureCollection('users/salem043/syr_admin0');
//Map.addLayer(Syria, {color: 'FF0000'}, 'Syria');

//World cities
var citiesWorld = ee.FeatureCollection('users/salem043/worldcities');
var cities = citiesWorld.filterMetadata('country', 'equals', 'Syria');
Map.addLayer(cities, {}, "Larger cities in Syria");

//buffer around each city
var bufferPoly = function(feature) {
  return feature.buffer(5000);  //!!Change back to 50k after making sure the border identification works 
};

var buffers = cities.map(bufferPoly);
Map.addLayer(buffers);

//Worldpop population data 2000-2010 cropped to Syria
var Allpop = ee.ImageCollection("WorldPop/GP/100m/pop")
  .filterDate('2000', '2012')
  .filterBounds(Syria)
  .map(function(image){return image.clip(Syria)}) ;

var pop = Allpop.filterMetadata('country', 'equals', 'SYR');
print("Worldpop data", pop);

var rainfall = ee.ImageCollection('TRMM/3B43V7')
  .filterDate('2000', '2012')
  .filterBounds(Syria)
  .map(function(image){return image.clip(Syria)}).select('precipitation') ;
print("rainfall", rainfall);


//////////////////////////////////////////////////////////////////////////
//
//  BUFFER MEAN RAINFALL DURING RAINY SEASONS
//
//////////////////////////////////////////////////////////////////////////

//This function converts our image collection into a stack of bands
function newCollectionToImage(collection){
var stack = ee.Image(collection.iterate(function(img, prev) {
return ee.Image(prev).addBands(img);
}, ee.Image(1)));
 
stack = stack.select(ee.List.sequence(1, stack.bandNames().size().subtract(1)));
return stack;
}

//Apply the function
var tch = pop.map(function(img){
var y = ee.String(ee.Date(img.get('system:time_start')).get("year"));
return img.set("year",y).rename(y);
});

var tchImg = newCollectionToImage(tch).clip(Syria);
var pop_Syr=tchImg;

var pop_Syria = 
pop_Syr.select(['2000', '2001', '2002', '2003', '2004', '2005', '2006',
'2007', '2008', '2009', '2010', '2011'],
['pop_00', 'pop_01', 'pop_02', 'pop_03', 'pop_04', 'pop_05', 'pop_06',
'pop_07', 'pop_08', 'pop_09', 'pop_10', 'pop_11']);


//Sum population counts in the pixels to the grid
var Syr_pop = pop_Syria.reduceRegions(buffers,ee.Reducer.sum());

print("population grids", Syr_pop);




//////////////////////////////////////////////////////////////////////////
//
//MEAN RAINFALL PER MONTH WITHIN EACH GRID CELL 
//
//////////////////////////////////////////////////////////////////////////


function newCollectionToImage(collection){
var stack = ee.Image(collection.iterate(function(img, prev) {
return ee.Image(prev).addBands(img);
}, ee.Image(1)));
 
stack = stack.select(ee.List.sequence(1, stack.bandNames().size().subtract(1)));
return stack;
}

var tch = rainfall.map(function(img){
var y = ee.String(ee.Date(img.get('system:time_start')).get("year"));
return img.set("year",y).rename(y);
});

var tchImg = newCollectionToImage(tch).clip(Syria);
var rainfall_Syria=tchImg;

var rainfall = 
rainfall_Syria.
reduceRegions(buffers, ee.Reducer.mean());

print(rainfall);

////
//combine data



var toyFilter = ee.Filter.equals({
  leftField: 'system:index',
  rightField: 'system:index'
});

// Define the join.
var innerJoin = ee.Join.inner();

// Apply the join.
var popRain = innerJoin.apply(Syr_pop, rainfall,  toyFilter);
print('Preliminary feature collection', popRain);


//Export as shapefile
Export.table.toDrive({
  collection: Syr_pop,
  fileFormat: 'SHP',
  description: 'SyriaPopRainData',
  folder: "Climate and conflict in Syria"
});


