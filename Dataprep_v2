//DATA IMPORT/////////////////////////////////////////////////////////////////////////

//Syria boundary polygon
var Syria = ee.FeatureCollection('users/salem043/syr_admin0');
//Map.addLayer(Syria, {color: 'FF0000'}, 'Syria');

//Conflict site location data
var site = ee.FeatureCollection('ft:1UNSrVLRJihOaHiXKYZNR_OIR3_E6PBuawdd1mKsU');

//Worldpop population data 2000-2010 cropped to Syria
var Allpop = ee.ImageCollection("WorldPop/GP/100m/pop")
  .filterDate('2000', '2011')
  .filterBounds(Syria)
  .map(function(image){return image.clip(Syria)}) ;

var pop = Allpop.filterMetadata('country', 'equals', 'SYR');
print(pop);

print('Worldpop data for Syria', pop);

var rainfall = ee.ImageCollection('TRMM/3B43V7')
  .filterDate('2000', '2011')
  .filterBounds(Syria)
  .map(function(image){return image.clip(Syria)}).select('precipitation') ;
print('NASA rainfall data', rainfall);



//Produce grid cells over Syria //////////////////////////////////////////// 
var lat_start = 32.31644;
var lat_end = 37.31914;
var lon_start = 35.61394; 
var lon_end = 42.38504;
// 2) Decide no. of (in this case: equally sized) cells
var num_cells = 10;
var lon_edge = (lon_end-lon_start)/Math.sqrt(num_cells);
var lat_edge = (lat_end-lat_start)/Math.sqrt(num_cells);
// 3) Create the grid
var polys = [];
var polys_line = [];
var cell_id = 0;
for (var lon = lon_start; lon < lon_end; lon += lon_edge) {
  var x1 = lon;
  var x2 = lon + lon_edge;
  for (var lat = lat_start; lat < lat_end; lat += lat_edge) {
    cell_id = cell_id + 1;
    var y1 = lat;
    var y2 = lat + lat_edge;

    polys.push(ee.Feature(ee.Geometry.Rectangle(x1, y1, x2, y2), {label: cell_id}));
  }
}
var grid = ee.FeatureCollection(polys).filterBounds(Syria);
print('Grid', grid)
Map.addLayer(grid);


//PREDICTED POPULATION WITHIN EACH GRID CELL ///////////////////////////////////////

//This function converts our image collection into a stack of bands
function newCollectionToImage(collection){
var stack = ee.Image(collection.iterate(function(img, prev) {
return ee.Image(prev).addBands(img);
}, ee.Image(1)));
 
stack = stack.select(ee.List.sequence(1, stack.bandNames().size().subtract(1)));
return stack;
}

//Apply the function
var tch = pop.map(function(img){
var y = ee.String(ee.Date(img.get('system:time_start')).get("year"));
return img.set("year",y).rename(y);
});

var tchImg = newCollectionToImage(tch).clip(Syria);
var pop_Syria=tchImg;

//Sum population counts in the pixels to the grid
var Syr_gridpop = pop_Syria.reduceRegions(grid,ee.Reducer.sum());
print('Grid population data', Syr_gridpop);



//MEAN RAINFALL PER MONTH WITHIN EACH GRID CELL  ///////////////////////////////////////////////////////


function newCollectionToImage(collection){
var stack = ee.Image(collection.iterate(function(img, prev) {
return ee.Image(prev).addBands(img);
}, ee.Image(1)));
 
stack = stack.select(ee.List.sequence(1, stack.bandNames().size().subtract(1)));
return stack;
}

var tch = rainfall.map(function(img){
var y = ee.String(ee.Date(img.get('system:time_start')).get("year"));
return img.set("year",y).rename(y);
});

var tchImg = newCollectionToImage(tch).clip(Syria);
var rainfall_Syria=tchImg;

var Syr_gridrain = 
rainfall_Syria.
reduceRegions(grid, ee.Reducer.mean());
print('Grid rainfall data', Syr_gridrain);


//Join the rainfall and population data ////////////////////////


var toyFilter = ee.Filter.equals({
  leftField: 'system:index',
  rightField: 'system:index'
});

// Define the join.
var innerJoin = ee.Join.inner();

// Apply the join.
var Syriagrid = innerJoin.apply(Syr_gridpop, Syr_gridrain,  toyFilter);


var Syriagrid_final=Syriagrid.map(function(pair) {
  var f1 = ee.Feature(pair.get('primary'));
  var f2 = ee.Feature(pair.get('secondary'));
  return f1.set(f2.toDictionary());
});

// Print the result.
print('Rainfall and pop grid data', Syriagrid_final);

//Export ///////////////////////////////////////////////////////

Export.table.toDrive(Syriagrid_final, "Syria data v1");
