/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
//DROUGHT, MIGRATION, AND CONFLICT PAPER - SYRIA
//COLETTE SALEMI
//FALL 2019
/////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////
//DATA IMPORT
//////////////////////////////////////////////////////////////////////////

//Syria boundary polygon
var Syria = ee.FeatureCollection('users/salem043/syr_admin0');
//Map.addLayer(Syria, {color: 'FF0000'}, 'Syria');

//Conflict site location data
var site = ee.FeatureCollection('ft:1UNSrVLRJihOaHiXKYZNR_OIR3_E6PBuawdd1mKsU');

//Worldpop population data 2000-2010 cropped to Syria
var Allpop = ee.ImageCollection("WorldPop/GP/100m/pop")
  .filterDate('2000', '2011')
  .filterBounds(Syria)
  .map(function(image){return image.clip(Syria)}) ;

var pop = Allpop.filterMetadata('country', 'equals', 'SYR');

var rainfall = ee.ImageCollection('TRMM/3B43V7')
  .filterDate('2000', '2011')
  .filterBounds(Syria)
  .map(function(image){return image.clip(Syria)}).select('precipitation') ;


//////////////////////////////////////////////////////////////////////////
//GRIDS
//////////////////////////////////////////////////////////////////////////


//Bounding box over Syria
var lat_start = 32.31644;
var lat_end = 37.31914;
var lon_start = 35.61394; 
var lon_end = 42.38504;

//Set number of grid cells
var num_cells = 10;
var lon_edge = (lon_end-lon_start)/Math.sqrt(num_cells);
var lat_edge = (lat_end-lat_start)/Math.sqrt(num_cells);
// 3) Create the grid
var polys = [];
var polys_line = [];
var cell_id = 0;
for (var lon = lon_start; lon < lon_end; lon += lon_edge) {
  var x1 = lon;
  var x2 = lon + lon_edge;
  for (var lat = lat_start; lat < lat_end; lat += lat_edge) {
    cell_id = cell_id + 1;
    var y1 = lat;
    var y2 = lat + lat_edge;

    polys.push(ee.Feature(ee.Geometry.Rectangle(x1, y1, x2, y2), {label: cell_id}));
  }
}

//Final grid, restricted to Syria boundaries
var grid_v0 = ee.FeatureCollection(polys).filterBounds(Syria);
print(grid_v0);

//Count number of conflict events per grid cell
var spatialFilter = ee.Filter.intersects({
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

var joined = ee.Join.saveAll({
  matchesKey: 'neighbors', 
}).apply({
  primary: grid_v0, 
  secondary: site, 
  condition: spatialFilter
});

var grid = joined.map(function(pt) {
  var neighs = ee.List(pt.get('neighbors'));
  var filt = ee.Filter.bounds(grid_v0);
  pt=pt.set('events', neighs.filter(filt).size());
  return(pt);
});

print('Grids with overall conflict event count', grid);

//////////////////////////////////////////////////////////////////////////
//PREDICTED POPULATION WITHIN EACH GRID CELL
//////////////////////////////////////////////////////////////////////////


//This function converts our image collection into a stack of bands
function newCollectionToImage(collection){
var stack = ee.Image(collection.iterate(function(img, prev) {
return ee.Image(prev).addBands(img);
}, ee.Image(1)));
 
stack = stack.select(ee.List.sequence(1, stack.bandNames().size().subtract(1)));
return stack;
}

//Apply the function
var tch = pop.map(function(img){
var y = ee.String(ee.Date(img.get('system:time_start')).get("year"));
return img.set("year",y).rename(y);
});

var tchImg = newCollectionToImage(tch).clip(Syria);
var pop_Syr=tchImg;

var pop_Syria = 
pop_Syr.select(['2000', '2001', '2002', '2003', '2004', '2005', '2006',
'2007', '2008', '2009', '2010'],
['pop_00', 'pop_01', 'pop_02', 'pop_03', 'pop_04', 'pop_05', 'pop_06',
'pop_07', 'pop_08', 'pop_09', 'pop_10']);


//Sum population counts in the pixels to the grid
var Syr_gridpop = pop_Syria.reduceRegions(grid,ee.Reducer.sum());
print('Grid population data', Syr_gridpop);

//////////////////////////////////////////////////////////////////////////
//MEAN RAINFALL PER MONTH WITHIN EACH GRID CELL 
//////////////////////////////////////////////////////////////////////////


function newCollectionToImage(collection){
var stack = ee.Image(collection.iterate(function(img, prev) {
return ee.Image(prev).addBands(img);
}, ee.Image(1)));
 
stack = stack.select(ee.List.sequence(1, stack.bandNames().size().subtract(1)));
return stack;
}

var tch = rainfall.map(function(img){
var y = ee.String(ee.Date(img.get('system:time_start')).get("year"));
return img.set("year",y).rename(y);
});

var tchImg = newCollectionToImage(tch).clip(Syria);
var rainfall_Syria=tchImg;

var Syr_gridrain = 
rainfall_Syria.
reduceRegions(grid, ee.Reducer.mean());
print('Grid rainfall data', Syr_gridrain);


//////////////////////////////////////////////////////////////////////////
//JOIN RAINFALL AND POPULATION DATA
//////////////////////////////////////////////////////////////////////////


var toyFilter = ee.Filter.equals({
  leftField: 'system:index',
  rightField: 'system:index'
});

// Define the join.
var innerJoin = ee.Join.inner();

// Apply the join.
var Syriagrid = innerJoin.apply(Syr_gridpop, Syr_gridrain,  toyFilter);
print('Preliminary feature collection', Syriagrid);

var Syriagrid_final=Syriagrid.map(function(pair) {
  var f1 = ee.Feature(pair.get('primary'));
  var f2 = ee.Feature(pair.get('secondary'));
  return f1.set(f2.toDictionary());
});

// Print the result.
print('Rainfall and pop grid data', Syriagrid_final);

//Export //////////////////////////////////////////////////////////

//Export.table.toDrive(Syriagrid_final, "Syria data v1");


//////////////////////////////////////////////////////////////////////////
//LINEAR DISTANCE BETWEEN GRID AND NEAREST GRID WITH >=20,000 PEOPLE
//////////////////////////////////////////////////////////////////////////

//Urban grids
var urbangrid = Syr_gridpop.filter(ee.Filter.gt('pop_05', 20000));
print('urban grids', urbangrid);

//Least cost path between sample grids and urban grids (will be zero for urban grids)

//Assume nobody is migrating more than 100 miles
var spatialFilter = ee.Filter.withinDistance({
  distance: 100000,
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

// Join the points
var joined = ee.Join.saveAll({
  matchesKey: 'neighbors', 
  measureKey: 'distance',
  ordering: 'distance'
}).apply({
  primary: grid, 
  secondary: urbangrid, 
  condition: spatialFilter
});

// Get distance to nearest point.
var withNearestDist = joined.map(function(f) {
  var nearestDist = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('distance');
  return f.set('nearestDist', nearestDist);
});


// Add the id number of the nearest camp (for later data merging)
var pointdata = withNearestDist.map(function(f) {
  var nearestcity = ee.Feature(ee.List(f.get('neighbors')).get(0))
      .get('urbanid');
  return f.set('urbanid', nearestcity);
});

print(pointdata);


